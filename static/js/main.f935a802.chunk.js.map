{"version":3,"sources":["utils/letterMap.js","utils/utils.js","App.js","index.js"],"names":["key","decrypt","N","e","cipherText","factors","n","i","Math","floor","push","prime_factors","e_inv","a","m","multInverse","plainText","length","charAt","num","Number","numDecrypted","index","state","text","outputText","type","errors","nChangeHandler","value","setState","eChangeHandler","textChangeHandler","typeChangeHandler","submitHandler","cipher","numEncrypted","encrypt","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","color","Form","size","Segment","stacked","Message","negative","visible","this","hidden","Group","widths","Input","fluid","onChange","label","placeholder","Dropdown","selection","options","Button","onClick","raised","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f935a802.chunk.js","sourcesContent":["export const key = {\r\n        '!': '0', '?': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', 'g': '7', 'h': '8',\r\n        'i': '9', 'j': '10', 'k': '11', 'l': '12', 'm': '13', 'n': '14', 'o': '15', 'p': '16', 'q': '17',\r\n        'r': '18', 's': '19', 't': '20', 'u': '21', 'v': '22', 'w': '23', 'x': '24', 'y': '25', 'a': '26',\r\n        '@': '27', '$': '28', '#': '29', '%': '30', '&': '31', '*': '32', 'z': '33', '(': '34'\r\n}","import { key } from './letterMap'\r\n\r\nfunction multInverse(a, m) {\r\n    a = a % m\r\n    for (let i=1; i < m; i++) {\r\n        if ((a * i) % m == 1) {\r\n            return i\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction prime_factors(n) {\r\n    let i = 2\r\n    let factors = []\r\n    while (i * i <= n) {\r\n        if (n % i) {\r\n            i +=1\r\n        } else {\r\n            n = Math.floor(n / i)\r\n            factors.push(i)\r\n        }\r\n    }\r\n    if (n > 1) {\r\n        factors.push(n)\r\n    }\r\n    return factors\r\n}\r\n\r\nexport function encrypt(N, e, plainText, key) {\r\n    let cipher = \"\"\r\n    for (let i=0; i < plainText.length; i++) {\r\n        if (plainText.charAt(i) == \" \") {\r\n            cipher += \" \"\r\n        } else {\r\n            let num = Number(key[plainText.charAt(i)])\r\n            let numEncrypted = (num ** e) % N\r\n            for (var index in key) {\r\n                if (Number(key[index]) == numEncrypted) {\r\n                    cipher += index\r\n                }\r\n            }\r\n        } \r\n    }\r\n    return cipher\r\n}\r\n\r\nexport function decrypt(N, e, cipherText, key) {\r\n    let factors = prime_factors(N)\r\n    let p = factors[0]\r\n    let q = factors[1]\r\n\r\n    let alt_mod = (p - 1) * (q - 1)\r\n    let e_inv = multInverse(e, alt_mod)\r\n\r\n    let plainText = \"\"\r\n    for (let i=0; i < cipherText.length; i++) {\r\n        if (cipherText.charAt(i) == \" \") {\r\n            plainText += \" \"\r\n        } else {\r\n            let num = Number(key[cipherText.charAt(i)])\r\n            let numDecrypted = (num ** e_inv) % N\r\n            for (var index in key) {\r\n                if (Number(key[index]) == numDecrypted) {\r\n                    plainText += index\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return plainText\r\n}","import React, { Component } from 'react';\r\nimport { Grid, Form, Header, Segment, Button, Dropdown, Message } from 'semantic-ui-react'\r\n\r\nimport './App.css'\r\nimport { encrypt, decrypt } from './utils/utils'\r\nimport { key } from './utils/letterMap'\r\n\r\nexport default class extends Component {\r\n  state = {\r\n    n: \"\",\r\n    e: \"\",\r\n    text: \"\",\r\n    outputText: \"\",\r\n    type: \"\",\r\n    errors: false\r\n  }\r\n\r\n  nChangeHandler = (e, value) => {\r\n      this.setState({\r\n          n: value.value\r\n      })\r\n  }\r\n\r\n  eChangeHandler = (e, value) => {\r\n      this.setState({\r\n          e: value.value\r\n      })\r\n  }\r\n\r\n  textChangeHandler = (e, value) => {\r\n    this.setState({\r\n        text: value.value\r\n    })\r\n  }\r\n\r\n  typeChangeHandler = (e, value) => {\r\n    this.setState({\r\n        type: value.value\r\n    })\r\n  }\r\n\r\n  submitHandler = () => {\r\n      if (this.state.n == \"\" || this.state.e == \"\" || this.state.type == \"\" || this.state.text == \"\") {\r\n          this.setState({\r\n              errors: true\r\n          })\r\n      }\r\n      else {\r\n        this.setState({\r\n            errors: false\r\n        })\r\n        if (this.state.type == \"en\") {\r\n            let cipherText = encrypt(this.state.n, this.state.e, this.state.text, key)\r\n            this.setState({\r\n                outputText: cipherText\r\n            })\r\n\r\n        } else if (this.state.type == \"de\") {\r\n            let plainText = decrypt(this.state.n, this.state.e, this.state.text, key)\r\n            this.setState({\r\n                outputText: plainText\r\n            })\r\n        }\r\n\r\n        \r\n      }\r\n      \r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n            <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n                <Grid.Column style={{ maxWidth: 700 }}>\r\n                    <Header as='h1' color='teal' textAlign='center'>RSA Encryption</Header>\r\n                    <Form size='large'>\r\n                        <Segment stacked>\r\n                        <Message negative visible={this.state.errors} hidden={!this.state.errors}>\r\n                            <Message.Header>There are errors with this form</Message.Header>\r\n                            <p>Please make sure all of the fields are filled out properly</p>\r\n                        </Message>\r\n                            <Form.Group widths='equal'>\r\n                                <Form.Input fluid onChange={this.nChangeHandler} label=\"Choose your N:\" placeholder=\"N = p * q where p, q are prime\" />\r\n                                <Form.Input fluid onChange={this.eChangeHandler} label=\"Choose your e:\" placeholder=\"gcd(e, (p-1) * (q-1)) = 1\" /> \r\n                                <Dropdown \r\n                                    fluid\r\n                                    selection\r\n                                    label=\"Encrypt or Decrypt\" \r\n                                    placeholder='Encrypt or Decrypt' \r\n                                    options={[{key: 'en', value: 'en', text: 'Encrypt'}, {key: 'de', value: 'de', text: 'Decrypt'}]} \r\n                                    onChange={this.typeChangeHandler}    \r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group widths='equal'>\r\n                                <Form.Input fluid onChange={this.textChangeHandler} type=\"text\" label= \"Enter text\" placeholder=\"Enter text...\" />\r\n                            </Form.Group>\r\n                            <Form.Group widths='equal'>\r\n                                <Button color='teal' fluid onClick={this.submitHandler}>Submit</Button>\r\n                            </Form.Group>\r\n                            <Header as='h3' textAlign='center'>Output Text</Header>\r\n                            <Segment raised>\r\n                                {this.state.outputText}\r\n                            </Segment>\r\n                        </Segment>\r\n                    </Form>\r\n                </Grid.Column>\r\n            </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}